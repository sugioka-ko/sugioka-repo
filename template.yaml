AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless application with React, Bedrock, Lambda, API Gateway, and DynamoDB.

Resources:
  CalculatorTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: React-db
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: DynamoDBAndBedrockAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt CalculatorTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  CalculatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyCalculatorFunction
      Handler: index.lambda_handler
      Runtime: python3.13
      Timeout: 15
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          from datetime import datetime
          from zoneinfo import ZoneInfo
          
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('React-db')
          bedrock_client = boto3.client(service_name='bedrock-runtime', region_name='ap-northeast-1')
          
          def call_bedrock(prompt: str) -> str:
              body = json.dumps({
                  "anthropic_version": "bedrock-2023-05-31",
                  "messages": [
                      {"role": "user", "content": [{"type": "text", "text": prompt}]}
                  ],
                  "max_tokens": 100,
                  "temperature": 0.1,
                  "top_p": 0.9
              })
              response = bedrock_client.invoke_model(
                  body=body,
                  modelId="apac.anthropic.claude-3-7-sonnet-20250219-v1:0",
                  accept="application/json",
                  contentType="application/json"
              )
              result = json.loads(response['body'].read())
              return result['content'][0]['text'].strip()

          def lambda_handler(event, context):
              headers = {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                  'Access-Control-Allow-Methods': 'POST,OPTIONS'
              }
              try:
                  if event.get('httpMethod') == 'OPTIONS':
                      return {
                          'statusCode': 200,
                          'headers': headers,
                          'body': json.dumps({})
                      }
                  
                  # 認証済みユーザーのIDを取得する (追加)
                  user_id = event['requestContext']['authorizer']['claims']['sub']
                  print(f"Authenticated user: {user_id}")

                  if not event.get('body'):
                      return {
                          'statusCode': 400,
                          'headers': headers,
                          'body': json.dumps({'error': 'リクエストボディが空です'})
                      }

                  body = json.loads(event['body'])
                  num1 = body.get('num1', 0)
                  num2 = body.get('num2', 0)

                  addition_result = num1 + num2
                  multiplication_result = num1 * num2

                  tokyo_tz = ZoneInfo('Asia/Tokyo')
                  current_time_tokyo = datetime.now(tokyo_tz).isoformat()
                  
                  sum_animal_name = call_bedrock(f"必ず日本語で、体重が約{addition_result}kgの動物の名前を一つだけ答えてください。")
                  product_animal_name = call_bedrock(f"必ず日本語で、体重が約{multiplication_result}kgの動物の名前を一つだけ答えてください。")

                  item_to_save = {
                      'id': f"{current_time_tokyo}_{uuid.uuid4()}",
                      'timestamp': current_time_tokyo,
                      'num1': num1,
                      'num2': num2,
                      'sum': addition_result,
                      'product': multiplication_result,
                      'sum_animal_name': sum_animal_name,
                      'product_animal_name': product_animal_name,
                      'user_id': user_id # ユーザーIDをDynamoDBに保存 (追加)
                  }
                  table.put_item(Item=item_to_save)

                  results = {
                      "message": "計算が成功しました",
                      "sum": addition_result,
                      "product": multiplication_result,
                      "sum_animal_name": sum_animal_name,
                      "product_animal_name": product_animal_name
                  }

                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps(results, ensure_ascii=False)
                  }

              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)}, ensure_ascii=False)
                  }

  CalculatorApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CalculatorApi

  # API GatewayにCognito Authorizerを追加 (新規追加)
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref CalculatorApi
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      
  # 認証を必須とする新しいPOSTメソッドを追加 (変更)
  ApiGatewayPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CalculatorApi
      ResourceId: !GetAtt CalculatorApi.RootResourceId
      HttpMethod: POST
      # 認証タイプをCOGNITO_USER_POOLSに設定
      AuthorizationType: COGNITO_USER_POOLS 
      # 作成したAuthorizerを紐づけ
      AuthorizerId: !Ref CognitoAuthorizer 
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CalculatorLambdaFunction.Arn}/invocations"
      MethodResponses: []

  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CalculatorLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalculatorApi}/*/POST/"
      
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayPostMethod
      - LambdaApiPermission
    Properties:
      RestApiId: !Ref CalculatorApi
      StageName: v1

  # Cognitoユーザープールとクライアントを定義 (新規追加)
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyServerlessAppUserPool
      UsernameConfiguration:
        CaseSensitive: false
      # メールアドレスをサインイン識別子として有効化 (新規追加)
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireUppercase: false
          RequireSymbols: false
          
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyServerlessAppClient
      UserPoolId: !Ref CognitoUserPool
      # 認証コードフローを有効化
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthScopes:
        - openid
        - phone
        - email
      CallbackURLs:
        - "http://localhost:3000"
      LogoutURLs:
        - "http://localhost:3000"

  # DynamoDBテーブルにユーザーIDを保存するための権限を追加 (変更)
  LambdaExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaUserAttributePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:GetPublicKey
            Resource: !GetAtt CognitoUserPool.Arn
      Roles:
        - !Ref LambdaExecutionRole

Outputs:
  ApiUrl:
    Description: URL of the API Gateway
    Value: !Sub "https://${CalculatorApi.RestApiId}.execute-api.${AWS::Region}.amazonaws.com/v1"
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient